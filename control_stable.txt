<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Control</title>
    <style>
	body {
	    font-family: sans-serif;
	}
        .toggle-switch {
            display: inline-block;
            width: 50px;
            height: 24px;
            background: #ccc;
            border-radius: 12px;
            position: relative;
            cursor: pointer;
        }

        .toggle-switch .toggle-knob {
            width: 22px;
            height: 22px;
            background: white;
            border-radius: 50%;
            position: absolute;
            top: 1px;
            left: 2px;
            transition: 0.2s;
        }

        .toggle-switch.active {
            background: #77e189;
        }

        .toggle-switch.active .toggle-knob {
            left: 26px;
        }
    </style>
<script>
    async function loadVideos() {
        const response = await fetch("list_videos.php");
        const videos = await response.json();
        const select = document.getElementById("videoSelect");

        select.innerHTML = ""; // Clear previous entries
        videos.forEach(video => {
            let option = document.createElement("option");
            option.value = video;
            option.textContent = video;
            select.appendChild(option);
        });
    }

    async function sendCommand() {
        const selectedVideo = document.getElementById("videoSelect").value;
        if (!selectedVideo) return alert("Please select a video.");

        const formData = new FormData();
        formData.append("video", "./videos/" + selectedVideo);

        const response = await fetch("send_command.php", {
            method: "POST",
            body: formData
        });

        const result = await response.text();
        console.log(result);
    }

    async function loadTimes() {
        const response = await fetch("times.json");
        const times = await response.json();
        const table = document.getElementById("timesTable");
        table.innerHTML = ""; // Clear previous entries

        Object.entries(times).forEach(([key, value]) => {
            const row = document.createElement("tr");

            // Time cell
            const keyCell = document.createElement("td");
            keyCell.textContent = key;
            row.appendChild(keyCell);

            // Time picker
            const timeCell = document.createElement("td");
            const timePicker = document.createElement("input");
            timePicker.type = "time";
            timePicker.value = key;
            timeCell.appendChild(timePicker);
            row.appendChild(timeCell);

            // Preset dropdown
            const presetCell = document.createElement("td");
            const presetDropdown = document.createElement("select");
            // Add preset options dynamically
            fetch("list_videos.php")
                .then(res => res.json())
                .then(videos => {
                    videos.forEach(video => {
                        const option = document.createElement("option");
                        option.value = video;
                        option.textContent = video;
                        if (video === value.preset) {
                            option.selected = true;
                        }
                        presetDropdown.appendChild(option);
                    });
                });
            presetCell.appendChild(presetDropdown);
            row.appendChild(presetCell);

            // Toggle switch
            const toggleCell = document.createElement("td");
            const toggle = document.createElement("div");
            toggle.classList.add("toggle-switch");
            if (value.enabled) {
                toggle.classList.add("active");
            }
            const knob = document.createElement("div");
            knob.classList.add("toggle-knob");
            toggle.appendChild(knob);
            toggleCell.appendChild(toggle);
            row.appendChild(toggleCell);

            // Delete button
            const actionCell = document.createElement("td");
            const deleteButton = document.createElement("button");
            deleteButton.textContent = "Delete";
            deleteButton.onclick = () => deleteEntry(key);
            actionCell.appendChild(deleteButton);
            row.appendChild(actionCell);

            // Append the row to the table
            table.appendChild(row);

            // Handle toggle changes
            toggle.addEventListener("click", () => {
                toggle.classList.toggle("active");
                const enabled = toggle.classList.contains("active");
                updateTime(key, "enabled", enabled);
            });

            // Update preset
            presetDropdown.addEventListener("change", (e) => {
                updateTime(key, "preset", e.target.value);
            });

            // Handle time picker changes - Apply on Enter or blur
            timePicker.addEventListener("blur", () => handleTimeChange(key, timePicker));
            timePicker.addEventListener("keydown", (e) => {
                if (e.key === "Enter") {
                    handleTimeChange(key, timePicker);
                }
            });
        });
    }

    // Apply changes to the time key
    async function handleTimeChange(oldKey, timePicker) {
        const newKey = timePicker.value;
        if (newKey !== oldKey) {
            // First, delete the old entry with the old key
            await deleteEntry(oldKey, true);
            
            // Then, update the entry with the new key
            const row = timePicker.closest('tr');
            const preset = row.querySelector('select').value;
            const enabled = row.querySelector('.toggle-switch').classList.contains("active");
            await addUpdatedEntry(newKey, preset, enabled, row, timePicker);
        }
    }

    // Helper function for deleting an entry by key
    async function deleteEntry(key, isUpdated = false) {
        const formData = new FormData();
        formData.append("key", key);

        const response = await fetch("delete_time.php", {
            method: "POST",
            body: formData
        });

        const result = await response.text();
        console.log(result);

        if (isUpdated) {
            loadTimes(); // Reload after deletion and update
        }
    }

    // Helper function for adding or updating an entry with the new time
    async function addUpdatedEntry(key, preset, enabled, row, timePicker) {
        const formData = new FormData();
        formData.append("key", key);
        formData.append("preset", preset);
        formData.append("enabled", enabled);

        const response = await fetch("add_time.php", {
            method: "POST",
            body: formData
        });

        const result = await response.text();
        console.log(result);

        // After successfully updating the entry, update the UI time picker
        timePicker.value = key; // Update the time picker with the new key value

        loadTimes(); // Reload the table to reflect changes
    }

    async function updateTime(key, field, value) {
        const formData = new FormData();
        formData.append("key", key);
        formData.append("field", field);
        formData.append("value", value);

        const response = await fetch("update_time.php", {
            method: "POST",
            body: formData
        });

        const result = await response.text();
        console.log(result);
    }

    async function deleteEntry(key, isUpdated = false) {
        const formData = new FormData();
        formData.append("key", key);

        const response = await fetch("delete_time.php", {
            method: "POST",
            body: formData
        });

        const result = await response.text();
        console.log(result);
        if (!isUpdated) {
            loadTimes(); // Reload the table after deleting the entry
        }
    }

    async function addEntry() {
        const key = prompt("Enter the time (HH:MM):");
        if (!key) return;

        const preset = prompt("Enter the video preset:");
        if (!preset) return;

        const enabled = confirm("Enable this entry?");

        const formData = new FormData();
        formData.append("key", key);
        formData.append("preset", preset);
        formData.append("enabled", enabled);

        const response = await fetch("add_time.php", {
            method: "POST",
            body: formData
        });

        const result = await response.text();
        console.log(result);
        loadTimes(); // Reload the table after adding the entry
    }

    // Helper function for adding an updated entry with new time key
    async function addUpdatedEntry(key, preset, enabled) {
        const formData = new FormData();
        formData.append("key", key);
        formData.append("preset", preset);
        formData.append("enabled", enabled);

        const response = await fetch("add_time.php", {
            method: "POST",
            body: formData
        });

        const result = await response.text();
        console.log(result);
        loadTimes(); // Reload the table after adding the entry
    }

    document.addEventListener("DOMContentLoaded", function () {
        loadVideos();
        loadTimes();
    });
</script>

</head>
<body>
    <h2>Video Control</h2>
    <select id="videoSelect"></select>
    <button onclick="sendCommand()">Play Selected Video</button>

    <h3>Schedule</h3>
    <table id="timesTable">
        <thead>
            <tr>
                <th>Action</th>
                <th>Time</th>
                <th>Preset</th>
                <th>Enabled</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dynamic rows will be added here -->
        </tbody>
    </table>
    <button onclick="addEntry()">Add Entry</button>
</body>
</html>
